 /* ---------------------------------------------------------------------- */
 /* 7. Transitions & Transforms */
 /* ---------------------------------------------------------------------- */
 .container-transitions {
   /*
   * Purpose: A shorthand to set all transition properties.
   * Syntax: transition: <property> <duration> <timing-function> <delay>;
   * When to Use: For a single, concise declaration.
   * Example: `transition: background-color 0.3s ease-in-out;`
   */
   transition: none;
   
   /*
   * Purpose: Specifies the CSS property to be animated.
   * Syntax: transition-property: <property-name> | all | none;
   * When to Use: To control which properties will be animated on state change. Using `all` can be less performant.
   */
   transition-property: all;
   
   /*
   * Purpose: Sets the duration of the transition.
   * Syntax: transition-duration: <time>;
   * When to Use: To control how long the animation takes.
   */
   transition-duration: 0s;
   
   /*
   * Purpose: Defines the acceleration curve of the transition.
   * Syntax: transition-timing-function: <value>;
   * Key Values & Usage:
   * - `ease`: A slow start, then fast, then slow end.
   * - `linear`: The same speed from start to end.
   * - `ease-in`: A slow start.
   * - `ease-out`: A slow end.
   * - `cubic-bezier()`: A custom curve for fine-grained control.
   */
   transition-timing-function: ease;
   
   /*
   * Purpose: Sets a delay before the transition begins.
   * Syntax: transition-delay: <time>;
   */
   transition-delay: 0s;
 }
 
 .container-transforms {
   /*
   * Purpose: Applies a 2D or 3D transform.
   * Syntax: transform: <function> | <function-2> ...;
   * When to Use: For visual effects on hover, on a button click, or as part of an animation.
   * Key Functions & Usage:
   * - `translate(x, y)`: Moves the element from its current position.
   * - `rotate(deg)`: Rotates the element around its center.
   * - `scale(x, y)`: Resizes the element.
   * - `skew(deg)`: Skews the element along the x and y axes.
   * - `perspective(px)`: Gives a 3D-transformed element a sense of depth.
   */
   transform: none;
   
   /*
   * Purpose: Sets the point around which a transform is applied.
   * Syntax: transform-origin: <x-value> <y-value>;
   * When to Use: When you want an element to rotate or scale from a point other than its default center.
   * Example: A spinning compass needle would have `transform-origin: center;`.
   */
   transform-origin: 50% 50%;
   /* Possible values: top, left, right, bottom, percentages, px, etc. */
   
   /*
   * Purpose: Specifies whether children of a 3D-transformed element are rendered in 3D space or flattened.
   * Syntax: transform-style: <value>;
   * When to Use: On the parent container to create a 3D scene.
   */
   transform-style: flat;
   /* Possible values: flat, preserve-3d. */
   
   /*
   * Purpose: Defines a perspective for 3D-transformed child elements.
   * Syntax: perspective: <value>;
   * When to Use: On the parent container to give child elements a 3D effect. The `px` value determines the depth of the scene.
   */
   perspective: none;
   
   /*
   * Purpose: Specifies the vanishing point for 3D-transformed elements.
   * Syntax: perspective-origin: <x-value> <y-value>;
   * When to Use: To change the viewer's point of view in a 3D scene.
   */
   perspective-origin: 50% 50%;
   
   /*
   * Purpose: Determines whether the back face of a 3D-transformed element is visible.
   * Syntax: backface-visibility: <value>;
   * When to Use: When creating a 3D card flip effect to hide the back of the card before it's flipped.
   */
   backface-visibility: visible;
   /* Possible values: visible, hidden. */
 }
 
 .container-animations {
   /*
   * Purpose: A shorthand for all animation properties.
   * Syntax: animation: <name> <duration> <timing-function> <delay> <iteration-count> <direction> <fill-mode> <play-state>;
   * When to Use: For creating complex, repeatable, or triggered animations using `@keyframes`.
   */
   animation: none;
   
   /*
   * Purpose: Specifies the `@keyframes` rule to be used.
   * Syntax: animation-name: <name>;
   */
   animation-name: none;
   
   /*
   * Purpose: Sets the duration of one animation cycle.
   */
   animation-duration: 0s;
   
   /*
   * Purpose: Sets the timing function for the animation.
   * Key Values & Usage: Same as `transition-timing-function`.
   */
   animation-timing-function: ease;
   
   /*
   * Purpose: Sets a delay before the animation starts.
   */
   animation-delay: 0s;
   
   /*
   * Purpose: Specifies how many times the animation should run.
   * Key Values & Usage: A number, or `infinite` to loop forever.
   */
   animation-iteration-count: 1;
   
   /*
   * Purpose: Determines whether the animation should alternate directions.
   * Key Values & Usage: `normal`, `reverse`, `alternate`, `alternate-reverse`.
   */
   animation-direction: normal;
   
   /*
   * Purpose: Specifies how the element should be styled before and after the animation runs.
   * Key Values & Usage: `none`, `forwards` (retains the final state), `backwards` (applies the starting state), `both`.
   */
   animation-fill-mode: none;
   
   /*
   * Purpose: Specifies whether the animation is running or paused.
   * Key Values & Usage: `running`, `paused`.
   */
   animation-play-state: running;
 }

 /* ---------------------------------------------------------------------- */


@layer animations {}