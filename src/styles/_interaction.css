 /* ---------------------------------------------------------------------- */
 /* 8. User Interaction & Accessibility */
 /* ---------------------------------------------------------------------- */
 .container-interaction {
   /*
 * Purpose: Controls how the cursor appears over the element.
 * Syntax: cursor: <value>;
 * When to use: To provide clear visual feedback. For example, use `pointer` for clickable elements, `wait` for loading states, or `grab` for draggable items.
 */
   cursor: auto;
   
   /*
 * Purpose: Prevents the user from selecting text or other content within an element.
 * Syntax: user-select: <value>;
 * When to use: On non-textual or interactive elements like buttons and images to prevent accidental text selection.
 * Key values: `auto`, `none`, `text`, `all`.
 */
   user-select: auto;
   
   /*
 * Purpose: Controls whether an element responds to mouse and touch events.
 * Syntax: pointer-events: <value>;
 * When to use: To make an element "unclickable" and allow events to pass through to elements behind it.
 * Key values: `auto`, `none`.
 */
   pointer-events: auto;
   
   /*
 * Purpose: Controls whether an element can be resized by the user.
 * Syntax: resize: <value>;
 * When to use: On elements like textareas where user resizing is desired.
 * Key values: `none`, `both`, `horizontal`, `vertical`.
 */
   resize: none;
   
   /*
 * Purpose: Specifies whether an element is rendered. Unlike `display: none`, a hidden element still occupies space.
 * Syntax: visibility: <value>;
 * When to use: To hide an element while maintaining its layout space.
 * Key values: `visible`, `hidden`, `collapse`.
 */
   visibility: visible;
   
   
   /*
 * Purpose: Specifies the color of the text input cursor (caret).
 * Syntax: caret-color: <color>;
 * When to use: To customize the caret color to match your website's color scheme.
 */
   caret-color: auto;
   
   /*
 * Purpose: Determines whether an element can be focused by a user via keyboard navigation.
 * Syntax: tabindex: <value>;
 * When to use: To make non-form elements focusable, or to control the focus order. A value of `0` makes it focusable, and `-1` removes it from the natural focus order.
 */
   tabindex: -1;
   
   /*
 * Purpose: Provides a hint to the browser on whether to enable spellchecking for an element's content.
 * Syntax: spellcheck: <value>;
 * When to use: On editable content (e.g., `<textarea>`) to explicitly enable or disable the browser's spellchecker.
 * Key values: `true`, `false`.
 */
   spellcheck: false;
   
   /*
 * Purpose: Controls the appearance of form controls, such as buttons and checkboxes.
 * Syntax: appearance: <value>;
 * When to use: To remove the default platform-specific styling of form elements, allowing for custom styling.
 * Key values: `none`, `auto`.
 */
   appearance: none;
   
   
   /*
 * Purpose: Specifies how the content breaks before and after a box.
 * Syntax: break-before: <value>; break-after: <value>;
 * When to use: In print stylesheets, to prevent an important section (like a heading) from being at the end of a page with its content on the next one.
 * Key values: `auto`, `always`, `avoid`, `page`, `column`, `region`.
 */
   break-before: auto;
   break-after: auto;
   
   /*
 * Purpose: Specifies how content breaks inside an element.
 * Syntax: break-inside: <value>;
 * When to use: To keep a block of content (like a figure or code block) together on one page or in one column.
 * Key values: `auto`, `avoid`, `avoid-page`, `avoid-column`.
 */
   break-inside: auto;
 }
 
 /* ---------------------------------------------------------------------- */
 
 @layer interaction {}