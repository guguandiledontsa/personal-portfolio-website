/* ───────── 4. Layout & Block Sections ───────── */
@layer layout {

/* ---------------------------------------------------------------------- */
/* 1. Core Layout & Positioning */
/* ---------------------------------------------------------------------- */
.container-layout {
  /*
   * Purpose: Controls how the element's box is rendered.
   * Syntax: display: <value>;
   * Key Values & Usage:
   * - `block`: Takes up the full width, forcing a new line. Best for main sections.
   * - `inline-block`: Stays in line with text but respects width and height. Good for buttons or icons.
   * - `flex`: Enables Flexbox layout for one-dimensional alignment. Ideal for navigation bars.
   * - `grid`: Enables CSS Grid for two-dimensional layouts. Great for complex page structures.
   * - `contents`: Makes the container itself invisible, but its children become direct children of its parent. Useful for semantic HTML that needs to be part of a flex or grid layout without being a flex/grid item itself.
   * - `none`: The element is completely removed from the document, and does not take up any space.
   */
  display: block;

  /*
   * Purpose: Specifies the positioning method.
   * Syntax: position: <value>;
   * Key Values & Usage:
   * - `static` (default): Follows the normal document flow. `top/left/etc.` have no effect.
   * - `relative`: Positioned relative to its normal position. Use to offset an element without affecting others.
   * - `absolute`: Positioned relative to its closest positioned ancestor. Use to overlay elements.
   * - `fixed`: Positioned relative to the viewport. Use for sticky headers or floating buttons.
   * - `sticky`: A hybrid of `relative` and `fixed`. The element behaves as `relative` until a certain scroll position is met, after which it becomes `fixed`.
   */
  position: static;

  /*
   * Purpose: Sets an element's position relative to its containing block.
   * Syntax: top: <value>; left: <value>; etc.
   * Alternatives: `inset: <value>;` is a shorthand for all four sides.
   * When to Use: Used with `position` values other than `static`.
   */
  top: auto;
  right: auto;
  bottom: auto;
  left: auto;
  inset: auto; /* Example: inset: 0; for full-container coverage. */

  /*
   * Purpose: Defines the vertical stacking order.
   * Syntax: z-index: <integer>;
   * When to Use: Use with positioned elements to control which one appears on top. Higher values are on top.
   */
  z-index: auto;

  /*
   * Purpose: Manages content that overflows the container.
   * Syntax: overflow: <value>;
   * Key Values & Usage:
   * - `visible`: Content is not clipped and may extend beyond the container.
   * - `hidden`: Content is clipped and the overflow is not visible.
   * - `scroll`: Always adds scrollbars.
   * - `auto`: Adds scrollbars only when needed.
   */
  overflow: visible;
  overflow-x: visible;
  overflow-y: visible;

  /*
   * Purpose: Aligns an element to the left or right, allowing other content to wrap around it.
   * Syntax: float: <value>;
   * When to Use: Primarily used for wrapping text around images. Before Flexbox and Grid, it was also used for multi-column layouts.
   */
  float: none; /* Possible values: none, left, right. */

  /*
   * Purpose: Specifies on which sides an element won't have floating elements next to it.
   * Syntax: clear: <value>;
   * When to Use: Use this to stop a container from wrapping around a floated element, forcing it to start on a new line below the float.
   */
  clear: none; /* Possible values: none, left, right, both. */
  
  /*
   * Purpose: A performance optimization that allows the browser to render an element in isolation from the rest of the page.
   * Syntax: contain: <value>;
   * Key Values & Usage:
   * - `layout`: A change to an element's size or position won't affect the layout of its parent or siblings.
   * - `paint`: A change to an element's content won't trigger a full page re-paint.
   * - `content`: A shorthand for both `layout` and `paint`.
   */
  contain: none; /* Possible values: none, strict, content, size, layout, style, paint. */
}

/* ---------------------------------------------------------------------- */
/* 2. Flexbox (Applied to Container) */
/* ---------------------------------------------------------------------- */
.container-flex {
  display: flex;

  /*
   * Purpose: Sets the direction of the main axis.
   * Syntax: flex-direction: <value>;
   * Key Values & Usage:
   * - `row` (default): Items are arranged horizontally.
   * - `column`: Items are arranged vertically.
   */
  flex-direction: row;

  /*
   * Purpose: Controls whether items wrap onto new lines.
   * Syntax: flex-wrap: <value>;
   * Key Values & Usage:
   * - `nowrap` (default): All items are on one line.
   * - `wrap`: Items will wrap to the next line if they can't fit.
   */
  flex-wrap: nowrap;

  /*
   * Purpose: Aligns items along the main axis.
   * Syntax: justify-content: <value>;
   * Key Values & Usage:
   * - `flex-start`: Items are aligned at the start of the axis.
   * - `center`: Items are centered.
   * - `space-between`: Items are evenly distributed with space between them.
   */
  justify-content: flex-start;

  /*
   * Purpose: Aligns items along the cross axis.
   * Syntax: align-items: <value>;
   * Key Values & Usage:
   * - `stretch` (default): Items stretch to fill the container on the cross axis.
   * - `center`: Items are centered.
   */
  align-items: stretch;

  /*
   * Purpose: Aligns wrapped lines along the cross axis.
   * Syntax: align-content: <value>;
   * When to Use: Only when `flex-wrap` is `wrap` and there is extra space on the cross axis.
   */
  align-content: stretch;
}

/* ---------------------------------------------------------------------- */
/* 3. CSS Grid (Applied to Container) */
/* ---------------------------------------------------------------------- */
.container-grid {
  display: grid;

  /*
   * Purpose: Defines the grid's columns and rows.
   * Syntax: grid-template-columns: <sizes>; grid-template-rows: <sizes>;
   * Key Values & Usage:
   * - `1fr`: A fractional unit that takes up one part of the available space. Excellent for responsive layouts.
   * - `100px`: A fixed size.
   * - `repeat(3, 1fr)`: A shorthand to create three equal-sized columns or rows.
   */
  grid-template-columns: none;
  grid-template-rows: none;

  /*
   * Purpose: Defines named grid areas for simple item placement.
   * Syntax: grid-template-areas: "<name1> <name2>";
   * When to Use: When you want to visually lay out your grid in a clear, readable way.
   */
  grid-template-areas: none;

  /*
   * Purpose: Controls the space between grid items.
   * Syntax: gap: <value>;
   * Alternatives: `row-gap` and `column-gap` for individual control.
   * When to Use: A modern, cleaner alternative to using margins on grid items.
   */
  gap: 0;
}

/* ---------------------------------------------------------------------- */
/* 4. Sizing & Spacing */
/* ---------------------------------------------------------------------- */
.container-sizing {
  /*
   * Purpose: Defines how width and height are calculated.
   * Syntax: box-sizing: <value>;
   * Key Values & Usage:
   * - `content-box` (default): Width/height apply to content only. Padding and border are added to the final size.
   * - `border-box`: Width/height include padding and border. This is generally preferred as it's more intuitive.
   */
  box-sizing: content-box;

  /*
   * Purpose: Sets the dimensions.
   * Syntax: width: <value>; min-width: <value>; etc.
   * When to Use: `width` for a fixed size, `min/max-width` for responsive boundaries.
   * Use relative units (`%`, `vw`) for fluid designs.
   */
  width: auto;
  height: auto;
  min-width: auto;
  max-width: none;
  min-height: auto;
  max-height: none;

  /*
   * Purpose: Sets the space outside the border.
   * Syntax: margin: <value>;
   * Alternatives: Use `margin-top/right/bottom/left` for specific sides.
   */
  margin: 0;
  /* Purpose: Provides a logical way to set margins and padding based on writing mode.
   * Alternatives: top/right/bottom/left properties.
   * When to Use: For multilingual or global websites where text direction may change (e.g., from LTR to RTL). */
  margin-block-start: 0; /* Top margin in LTR, left margin in RTL. */
  margin-block-end: 0;
  margin-inline-start: 0;
  margin-inline-end: 0;

  /*
   * Purpose: Sets the space inside the border.
   * Syntax: padding: <value>;
   * Alternatives: Use `padding-top/right/bottom/left` for specific sides.
   */
  padding: 0;
  
  padding-block-start: 0;
  padding-block-end: 0;
  padding-inline-start: 0;
  padding-inline-end: 0;
}

/* ---------------------------------------------------------------------- */
/* 5. Appearance & Styling */
/* ---------------------------------------------------------------------- */
.container-style {
  /*
   * Purpose: Sets the background.
   * Syntax: background: <value>;
   * Alternatives: Use longhand properties like `background-color`, `background-image`, `background-position`, etc.
   */
  background: none;

  /*
   * Purpose: Draws a border.
   * Syntax: border: <value>;
   * Alternatives: Use longhand properties like `border-width`, `border-style`, `border-color`.
   */
  border: none;

  /*
   * Purpose: Rounds the corners.
   * Syntax: border-radius: <value>;
   * Alternatives: Use longhand for each corner (`border-top-left-radius`, etc.).
   */
  border-radius: 0;

  /*
   * Purpose: Adds a shadow to the element's box.
   * Syntax: box-shadow: <h-offset> <v-offset> <blur> <spread> <color>;
   * When to Use: To add visual depth. The first two values are the horizontal and vertical offsets.
   */
  box-shadow: none;

  /*
   * Purpose: Sets the transparency.
   * Syntax: opacity: <number>;
   * When to Use: Fades the entire element, including its content.
   */
  opacity: 1;
}
.container-visual-effects {
  /* Purpose: Adds a background image or color that's fixed relative to the viewport.
   * When to Use: For a parallax effect. */
  background-attachment: scroll; /* Possible values: scroll, fixed, local. */

  /* Purpose: Specifies a blend mode for an element's content.
   * When to Use: For creative visual effects where you want colors to interact with the background. */
  mix-blend-mode: normal; /* Possible values: multiply, screen, overlay, darken, lighten, etc. */

  /* Purpose: Clips an element to a specified shape.
   * When to Use: To create non-rectangular layouts without using complex background images. */
  clip-path: none; /* Possible values: inset(), circle(), polygon(), url(). */

  /* Purpose: Creates a filter effect (like Photoshop) on the element.
   * When to Use: For quick image adjustments or hover effects. */
  filter: none; /* Possible values: blur(), brightness(), contrast(), grayscale(), hue-rotate(), etc. */

  /* Purpose: Specifies how the element's content should fit into its container.
   * When to Use: To prevent images or videos from being distorted when resized. */
  object-fit: fill; /* Possible values: fill, contain, cover, scale-down. */
}

/* ---------------------------------------------------------------------- */
/* 6. Typography (if text is inside) */
/* ---------------------------------------------------------------------- */
.container-typography {
  /*
   * Purpose: Sets the font family, size, weight, and other properties.
   * Syntax: font: <value>;
   * Alternatives: Use longhand properties like `font-size`, `font-family`, etc.
   */
  font-size: medium; /* Sets the size of the text.
  Possible values: numeric values, percentages, keywords. */
  font-family: sans-serif;
  font-weight: normal; /* Sets the boldness of the text.
  Possible values: normal, bold, bolder, lighter, numeric values (100-900). */

  /*
   * Purpose: Aligns text horizontally.
   * Syntax: text-align: <value>;
   * Key Values & Usage:
   * - `left`, `right`, `center`: Common alignment options.
   * - `justify`: Stretches lines of text so each has equal width.
   */
  text-align: left;
}

/* ---------------------------------------------------------------------- */
/* 7. Transitions & Transforms */
/* ---------------------------------------------------------------------- */
.container-transitions {
  /*
   * Purpose: Applies 2D or 3D transformations.
   * Syntax: transform: <function>;
   * Key Functions & Usage:
   * - `translate(x, y)`: Moves the element.
   * - `rotate(deg)`: Rotates the element.
   * - `scale(x, y)`: Resizes the element.
   */
  transform: none;

  /*
   * Purpose: Animates CSS properties over time.
   * Syntax: transition: <property> <duration> <timing-function> <delay>;
   * When to Use: For creating smooth, subtle changes on hover or focus.
   */
  transition: all 0s ease 0s;
  
  
  /* Purpose: A shorthand for transition properties.
   * When to Use: To create a smooth animation when a CSS property changes.
   * Example: transition: background-color 0.3s ease-in-out; */
  transition-property: all;
  transition-duration: 0s;
  transition-timing-function: ease;
  transition-delay: 0s;

  /* Purpose: A shorthand for animation properties.
   * When to Use: To create a loopable, time-based animation using @keyframes. */
  animation-name: none;
  animation-duration: 0s;
  animation-timing-function: ease;
  animation-delay: 0s;
  animation-iteration-count: 1; /* `infinite` to loop forever. */
  animation-direction: normal;
  animation-fill-mode: none;
  animation-play-state: running;
}

/* ---------------------------------------------------------------------- */
/* 8. User Interaction & Accessibility */
/* ---------------------------------------------------------------------- */
.container-interaction {
  /*
   * Purpose: Controls how the cursor appears over the element.
   * Syntax: cursor: <value>;
   * When to Use: Use `pointer` for clickable elements like links or buttons.
   */
  cursor: auto;

  /*
   * Purpose: Prevents the user from selecting text.
   * Syntax: user-select: <value>;
   * When to Use: On non-textual elements like buttons or images.
   */
  user-select: auto;

  /*
   * Purpose: Controls how an element responds to mouse/touch events.
   * Syntax: pointer-events: <value>;
   * When to Use: Set to `none` to make an element "unclickable."
   */
  pointer-events: auto;
  
  
  /* Purpose: Provides a hint to the browser on how to break content across pages.
   * When to Use: For print stylesheets to prevent elements from splitting awkwardly across pages. */
  break-before: auto; /* Possible values: auto, always, avoid, page, column, etc. */
  break-after: auto;
  break-inside: auto;

/* Purpose: Controls whether an element can be resized by the user.
   * When to Use: On textarea or other elements where user resizing is desired. */
  resize: none; /* Possible values: none, both, horizontal, vertical. */

}
  
  /* ─────────  ───────── */
  
  
  .supblock {
    min-height: var(--min-h);
    background-color: var(--bg-color);
    text-align: var(--alignment);

    
    &:hover {
      --bg-color: red;
      --alignment: center;
    }
  }
  
  .supblock--header {
    /* i wanna style the header with grid
    * use it to place its subs in irregular places */ 
    &:hover {
      --min-h: 100vh;
      --bg-color: orange;
    }
  }
  .supblock--main {
    &:hover {
      --min-h: 100vh;
    }
  }
  .supblock--footer {
    &:hover {
      --min-h: 100vh;
    }
  }
  
  /* ─────────  ───────── */
  
  .block {
    background-color: var(--bg-color);
    text-align: var(--alignment);
    color: var(--txt-color);
    
    &:hover {
      --bg-color: deeppink;
      --txt-color: white;
      --alignment: center;
    }
  }
  
  .block--intro1 {
    &:hover {
      --bg-color: pink;
    }
  }
  .block--body1 {
    &:hover {
      --bg-color: palevioletred;
    }
  }
  .block--end1 {
    &:hover {
      --bg-color: mediumvioletred;
    }
  }
  
  /* ─────────  ───────── */
  
  .subblock {
    background-color: var(--bg-color);
    
    &:hover {
      --bg-color: blue;
    }
  }
  
  .subblock--nav1 {
    &:hover {
      --bg-color: lightslategray;
    }
  }
  .subblock--intro1 {
    &:hover {
      --bg-color: lime;
    }
  }
  .subblock--body1 {
    &:hover {
      --bg-color: lavender;
    }
  }
  .subblock--end1 {
    &:hover {
      --bg-color: darkslategrey;
    }
  }
  
  /* ─────────  ───────── */
  
  .subsubblock {
    color: var(--txt-color);
    
    &:hover{
      color: dimgrey;
    }
  }
}