/* ========== CSS RESET ========== */
/* Applies to all elements.*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* ========== ROOT VARIABLES ========== */
/*
  CSS custom properties (aka variables) are defined using:
    --name: value;
  Use them with var(--name)
  They're great for consistent themes: fonts, colors, spacing, etc.
*/
:root {
  --font-base: "Bangers", sans-serif;
  --font-size: 16px;
  /* Base size for rem units */
  --line-height: 1.5;
  /* Unitless = scales with font size */

  /* Theme colors */
  --color-bg: #fff;
  --bg-violet: hsl(273, 75%, 66%);
  --bg-blue: hsl(240, 73%, 65%);
  
  --color-header-bg: #737496;
  --color-header-inner: #B3B5EA;
  
  --color-main-bg: #D6F0F6;
  --color-main-alt: #C0EFFB;
  
  --color-section: #8CC5D3;
  
  --color-about: #5CA0B0;
  --color-projects: #7CB6C4;
  
  --color-project-card: #69B5D0;

  --color-button-bg: #ACA0ED;
  --color-button-primary:#9282F7;
  --color-button-hover:#513CAE;
  
  --color-footer: #82F7CE;
  
  --color-text: #222;
  --color-header-text: white;
  --color-button-text: black;

  --radius-sm: 4px;
  --radius-md: 6px;
  --radius-lg: 8px;
}

/* ========== BASE STYLES ========== */
/*
  Type selectors (like html, body) apply to those exact elements.
  Set overall font, spacing, and layout behavior.
*/
html {
  font-size: var(--font-size);
  /* 1rem = 16px */
  font-family: var(--font-base);
  /* Use custom or fallback font */
  line-height: var(--line-height);
  /* Line height = 1.5x font size */
}

body {
  background-image: linear-gradient(var(--bg-violet), var(--bg-blue));
  color: var(--color-text);
  min-height: 100vh;
  padding: 1vh 1vh 0vh 1vh;
}

/* ========== LAYOUT ========== */
/*
  .container = class selector (matches class="container")
  Often used to center content and limit its width
*/
.layout__container {
  max-width: 960px;
  margin: 0 auto;
  /* Auto left/right = horizontal center */
  padding: 0 1rem;
  /* min-height: 80vh; */
}

/* ========== HEADER ========== */
/*
  <header> = type selector (matches <header> tag)
  header .container = descendant selector (matches .container inside header)
*/
.header {
  background-color: var(--color-header-bg);
  color: var(--color-header-text);
  padding: 1rem;
  text-align: center;
  border-radius: var(--radius-lg);
  margin-bottom: 4rem;
}
/*div of header*/
.header__container {
  background-color: var(--color-header-inner);
  padding: 1rem;
  border-radius: var(--radius-sm);
}
/*h in header*/
.header__title {
  font-size: 2rem;
}
/*p in header*/
.header__subtitle 

/* ========== MAIN CONTENT AREA ========== */
/*
  main > section:last-child
    > = child combinator (selects only direct children)
    :last-child = pseudo-class (selects last child of parent)
*/
.main {
  background-color: var(--color-main-bg);
  padding: 2rem 1rem;
  border-radius: var(--radius-lg);
  
  min-height:80vh ;
}
/*div of main*/
.main__container {
  background-color: var(--color-main-alt);
  padding: 1rem;
  border-radius: var(--radius-md);
  min-height: 80vh;
}

/* ========== SECTIONS ========== */
/*
  section = type selector for <section> tags
  Used for general layout blocks like About, Projects, etc.
*/
.section {
  background-color: var(--color-section);
  margin-bottom: 2rem;
  padding: 1rem;
  border-radius: var(--radius-md);
  text-align: center;
}
/*h of section*/
.section__title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}
/*p of section*/

/* ========== About me - SECTION ========== */
.section--about {
  background-color: white;
  min-height: 10vh;
}

/* ========== projects - SECTION ========== */
.section--projects {
  background-color: #ffe;
  min-height: 50vh;
}

/* ========== PROJECT CARD ========== */
/*?landed on max the card min the elements init.
 px but px are the first to break the site on narrow displays. how to make width reletive to parent
 button also changes card appreance so should it be in here? or would that be too specific*/
 /*div / article*/
.project-card {
  background-color: var(--color-project-card);
  padding: 1rem;
  margin: 1rem;
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  border-radius: var(--radius-sm);
  text-align: left;
  max-width: 400px;
  display: inline-block;

  /*
  display: inline-block;          very own code: made the cards respond to width if can fit both in a line then do else vetical /*side effect: the card are not the same size, card width depends on card description
   min-width: 220px;            has no effect when display inline
  position: relative;
  i wanna try n stop the elements/blocks in other blocks from over flowing beyond the size of its parent block
  */
  
  transition: background-color 0.5s ease-in-out;
}
.card-cover
  /*added a 'cover' something i can change to make a cool effect when the project catd is havered on maybe */

/*h in card*/
.project-card__title {
  font-size: 1.25rem;
  margin-bottom: 0.5rem;
  min-width: 230px;
}
/*p in card*/
.project-card__description {
  font-size: 1rem;
  margin-bottom: 1rem;
  min-width: 230px;
  
  /*
  width: 300px;         width is has no effect when display is content on descr
  */
}

.project-card:hover {
  background-color: #69B5B0;            /*for me to do this i had to hard code the initial color value then edit it wanna know if is there a way i could have : old +- delta_amount*/
  /* background-color: calc( var(--color-project-card) + #ffffff); something maybe like this*/
}

/* ========== BUTTON ========== */
.button {
  display: inline-block;
  /*???whats inline-block?how is it*/
  padding: 0.5rem 1rem;
  font-size: 1rem;
  font-family: inherit;
  /*???*/
  border: none;
  /*??? what does none mean*/
  border-radius: var(--radius-sm);
  /*???how does setting a radius do actually*/
  cursor: pointer;
  /*???what are other pointer types what does the option do*/
  text-decoration: none;
  /*transition: background-color 0.2s step-end;*/
  transition: transform 0.2s;
  /*???*/

}
.button--primary {
  background-color: var(--color-button-primary);
  color: var(--color-button-text);
}
.button--primary:hover {
  background-color: var(--color-button-hover);
  transform: scale(1.1);
}
.button:after { /*after does nothing*/
  background-color: rgb(155, 109, 48);
}

/* ========== FOOTER ========== */
.footer {
  background-color: var(--color-footer);
  padding: 1rem;
  border-radius: var(--radius-lg);
  text-align: center;
  
  bottom: 0;
  left: 0;
  position: fixed;                /* footer is always fixed to the bottom of the screen even as you scroll rn is just centent size  wanna make it full bottom width*/
  min-width: 100vw;                   /*w minwidth 100vw todo bien now the problema is i bet is the body padding pushes it*/
}

.footer__text {
  font-size: 0.875rem;
}

/* ========== TEXT ELEMENTS ==========
why do we have a text section when we already have title/description */
/*
  Group selector: targets h1, h2, h3
  font-weight: controls thickness (normal, bold, or numbers 100â€“900)
*/
h1,
h2,
h3 {
  font-weight: bold;
}

p {
  margin-bottom: 1rem;
}

/* ========== LINKS ========== */
/*
  a = anchor (link) tag
  a:hover = pseudo-class (applies only on mouse hover)
*/
a {
  color: #1e88e5;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
  /*what are other decorations???*/
}

/* ========== NEXT ========== */
/* insteraction without js/ts*/
/* add a nav*/

/* ==========    ========== */
/* ==========
body.dark {      /*now is this syntax diff from "block .class"
  background-color: #222;
  color: white;
}
*/

/*
img {
  height: auto;
  display: block;
}
*/
/*
.debug * {
  outline: 1px dashed red;
}
*/
/*
body::-webkit-scrollbar {
}
body::-webkit-scrollbar-thumb {
}
body::-webkit-scrollbar-track {
*/
/* 
ðŸ§  CSS SELECTORS â€” cheat sheet (referenced inline above)
---------------------------------------------------------
6. Adjacent sibling:      A + B (B immediately after A)
7. General sibling:       A ~ B (B follows A, not necessarily directly)
8. Pseudo-classes:        a:hover, li:first-child, input:checked
9. Pseudo-elements:       p::after, h1::before
10. Attribute selector:   input[type="text"], [data-role="tab"]
*/  
