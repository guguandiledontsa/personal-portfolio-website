/* ========== CSS RESET ========== */
/* Applies to all elements.*/
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* ========== ROOT VARIABLES ========== */
/*
  CSS custom properties (aka variables) are defined using:
    --name: value;
  Use them with var(--name)
  They're great for consistent themes: fonts, colors, spacing, etc.
*/
:root {
  --font-base: "Bangers", sans-serif;
  --font-size: 16px;
  /* Base size for rem units */
  --line-height: 1.5;
  /* Unitless = scales with font size */

  /* Theme colors */
  --color-bg: #f5f5f5;
  --color-text: #222;
  --color-accent: #ffa726;
  --color-header-bg: #222;
  --color-header-inner: #333;
  --color-header-text: white;
  --color-main-bg: #fff9c4;
  --color-main-alt: #ffeca7;
  --color-section: #ffecb3;
  --color-about: #ffe082;
  --color-projects: #ffe54f;
  --color-project-card: #fff3e0;
  --color-button-text: black;
  --color-button-bg: orange;
  --color-footer: blanchedalmond;

  --radius-sm: 4px;
  --radius-md: 6px;
  --radius-lg: 8px;
}

/* ========== BASE STYLES ========== */
/*
  Type selectors (like html, body) apply to those exact elements.
  Set overall font, spacing, and layout behavior.
*/
html {
  font-size: var(--font-size);
  /* 1rem = 16px */
  font-family: var(--font-base);
  /* Use custom or fallback font */
  line-height: var(--line-height);
  /* Line height = 1.5x font size */
}

body {
  background-color: var(--color-bg);
  color: var(--color-text);
  padding: 1rem;
}
/* ==========*/
body.dark {      /*now is this syntax diff from "block .class"*/
  background-color: #222;
  color: white;
}

/* ========== LAYOUT ========== */
/*
  .container = class selector (matches class="container")
  Often used to center content and limit its width
*/
.layout__container {
  max-width: 960px;
  margin: 0 auto;
  /* Auto left/right = horizontal center */
  padding: 0 1rem;
}

/* ========== HEADER ========== */
/*
  <header> = type selector (matches <header> tag)
  header .container = descendant selector (matches .container inside header)
*/
.header {
  background-color: var(--color-header-bg);
  color: var(--color-header-text);
  padding: 1rem;
  text-align: center;
  border-radius: var(--radius-lg);
  margin-bottom: 0rem;
}

.header__container {
  background-color: var(--color-header-inner);
  padding: 1rem;
  border-radius: var(--radius-sm);
}

.header__title {
  font-size: 2rem;
}

.header__subtitle {
  font-size: 1.2rem;
  margin-top: 0.5rem;
}

/* ========== MAIN CONTENT AREA ========== */
/*
  main > section:last-child
    > = child combinator (selects only direct children)
    :last-child = pseudo-class (selects last child of parent)
*/
.main {
  background-color: var(--color-main-bg);
  padding: 2rem 1rem;
  border-radius: var(--radius-lg);
}

.main__container {
  background-color: var(--color-main-alt);
  padding: 1rem;
  border-radius: var(--radius-md);
}

/* ========== SECTIONS ========== */
/*
  section = type selector for <section> tags
  Used for general layout blocks like About, Projects, etc.
*/
.section {
  background-color: var(--color-section);
  margin-bottom: 2rem;
  padding: 1rem;
  border-radius: var(--radius-md);
  text-align: center;
}

.section__title {
  font-size: 1.5rem;
  margin-bottom: 1rem;
}

.section__text {
  font-size: 1rem;
}

/* ========== PROJECT CARD ========== */
/*?landed on max the card min the elements init.
 px but px are the first to break the site on narrow displays. how to make width reletive to parent
 button also changes card appreance so should it be in here? or would that be too specific*/
.project-card {
  background-color: var(--color-project-card);
  padding: 1rem;
  margin: 1rem;
  border-left: 6px solid var(--color-accent);
  border-radius: var(--radius-sm);
  text-align: left;

  /* display: inline-block;          very own code: made the cards respond to width if can fit both in a line then do else vetical /*side effect: the card are not the same size, card width depends on card description*/
  /* min-width: 220px;            /*has no effect when display inline*/
  display: inline-block;
  max-width: 400px;
}

.project-card__title {
  font-size: 1.25rem;
  margin-bottom: 0.5rem;

  min-width: 230px;
}

.project-card__description {
  font-size: 1rem;
  margin-bottom: 1rem;
  /* width: 300px;         width is has no effect when display is content on descr */

  min-width: 230px;
}

/* ========== BUTTON ========== */
.button {
  display: inline-block;
  /*???whats inline-block?how is it*/
  padding: 0.5rem 1rem;
  font-size: 1rem;
  font-family: inherit;
  /*???*/
  border: none;
  /*??? what does none mean*/
  border-radius: var(--radius-sm);
  /*???how does setting a radius do actually*/
  cursor: pointer;
  /*???what are other pointer types what does the option do*/
  text-decoration: none;
  transition: background-color 0.2s step-end;
  /*???*/
}

.button--primary {
  background-color: var(--color-accent);
  color: var(--color-button-text);
}

.button--primary:hover {
  background-color: var(--color-button-bg);
  border: 6px solid var(--color-accent);
}

.button::after { /*after does nothing*/
  background-color: rgb(155, 109, 48);
}

/* ========== FOOTER ========== */
.footer {
  background-color: var(--color-footer);
  padding: 1rem;
  border-radius: var(--radius-lg);
  text-align: center;
  margin-top: 0.6rem;
}

.footer__text {
  font-size: 0.875rem;
}

/* ========== TEXT ELEMENTS ========== */
/*
  Group selector: targets h1, h2, h3
  font-weight: controls thickness (normal, bold, or numbers 100â€“900)
*/
h1,
h2,
h3 {
  font-weight: bold;
}

p {
  margin-bottom: 1rem;
}

/* ========== LINKS ========== */
/*
  a = anchor (link) tag
  a:hover = pseudo-class (applies only on mouse hover)
*/
a {
  color: #1e88e5;
  text-decoration: none;
}

a:hover {
  text-decoration: underline;
  /*what are other decorations???*/
}

/* ========== NEXT ========== */
/* insteraction without js/ts*/
/* add a nav*/

/* ==========    ========== */
/*
img {
  height: auto;
  display: block;
}
*/
/*
.debug * {
  outline: 1px dashed red;
}
*/
/*
body::-webkit-scrollbar {
}
body::-webkit-scrollbar-thumb {
}
body::-webkit-scrollbar-track {
*/
/* 
ðŸ§  CSS SELECTORS â€” cheat sheet (referenced inline above)
---------------------------------------------------------
6. Adjacent sibling:      A + B (B immediately after A)
7. General sibling:       A ~ B (B follows A, not necessarily directly)
8. Pseudo-classes:        a:hover, li:first-child, input:checked
9. Pseudo-elements:       p::after, h1::before
10. Attribute selector:   input[type="text"], [data-role="tab"]
*/
